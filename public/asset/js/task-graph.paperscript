/* globals paper, Layer, Path, Point, PointText, Group, Path.circle, onMouseUp, $ */
'use strict';

/*
  Initialize
 */
// get paper dimensions
var width = paper.view.bounds.width;
var height = paper.view.bounds.height;

// ensure we're working w/ a square
if( width !== height ) {
  var minSize = Math.min( width, height );
  paper.view.bounds.width = minSize;
  paper.view.bounds.height = minSize;
}

/**
 * Generate a random pastel colour
 * @return {String} CSS style hex colour code
 */
function randomColor(){
  var r = ( Math.round( Math.random() * 110 ) + 110 ).toString( 16 );
  var g = ( Math.round( Math.random() * 110 ) + 110 ).toString( 16 );
  var b = ( Math.round( Math.random() * 110 ) + 110 ).toString( 16 );
  return '#' + r + g + b;
}

/**
 * Convert a coordinate into Point value
 * (assume each axis from -100 to +100)
 *
 * @param  {Number} cood The coordinate to convert
 * @return {Number}      Converted coordinate
 */
function convertCoordToPoint( coord ) {
  var step = (width / 2) / 100; // 1%
  return (width / 2) + (step * coord);
}
// expose to js
window.convertCoordToPoint = convertCoordToPoint;

/**
 * Convert a Point value into a coordinate
 * (assume each axis from -100 to +100)
 *
 * @param  {Number} point The x or y value of a Point
 * @return {Number}       Converted Point value
 */
function convertPointToCoord( point ) {
  var step = (width / 2) / 100; // 1%
  return (point - (width / 2)) / step;
}
// expose to js
window.convertPointToCoord = convertPointToCoord;

/* --------------------------------------
  Colour background white
 -------------------------------------- */

// var bgLayer = new Layer();

// new Path.Rectangle({
//   point: [ 0, 0 ],
//   size: [ width, height ],
//   fillColor: '#fff'
// });

/* --------------------------------------
  Begin Axis Layer
 -------------------------------------- */

var axisLayer = new Layer();

/*
  Deal w/ axis first
 */
var Axis = new function() {
  var color = '#444';
  var step = (width / 2) / 100;
  var padding = ( step * 10 );

  var arrowHead = function( pos, rotate ) {
    var path = new Path( [pos[0], pos[1] - step], [pos[0] + (2 * step), pos[1] + (4 * step)], [pos[0], pos[1] + (4 * step)], [pos[0] - (2 * step), pos[1] + (4 * step)], [pos[0], pos[1] - step] );
    path.closed = true;
    path.simplify(2.5);
    path.fillColor = color;
    path.rotate( rotate || 0);

    return path;
  };

  var x = {
    path: new Path(),
    start: new Point( padding, (height / 2) ),
    head: arrowHead( [(width / 2), padding] )
  };
  var y = {
    path: new Path(),
    start: new Point( (width / 2), padding ),
    head: arrowHead( [width - ( padding + (2 * step) ), (height / 2) - (2 * step)], 90 )
  };

  // draw x axis
  x.path.strokeColor = color;
  x.path.moveTo( x.start );
  x.path.lineTo( x.start + [ width - ( padding * 2 ), 0 ] );

  // draw y axis
  y.path.strokeColor = color;
  y.path.moveTo( y.start );
  y.path.lineTo( y.start + [ 0, height - ( padding * 2 ) ] );

  return {
    x: x,
    y: y
  };
};

/* --------------------------------------
  Begin Tasks Layer
 -------------------------------------- */

var taskLayer = new Layer();

/**
 * Tasks model
 */
var Tasks = new function() {
  var tasks = [];
  var preventAdd = false;
  var preset = {
    iconSize: ((width / 2) / 100) * 7,
    iconChar: '\uf00d',
    fillColor: undefined,
    textColor: '#fff'
  };

  return {
    make: function( point, fillColor, textColor, iconChar ) {
      var task = new Group();
      var strokeColor;

      if( fillColor === 'white' || preset.fillColor === 'white' ) {
        strokeColor = '#eee';
      }

      var circle = new Path.Circle({
        center: point,
        radius: preset.iconSize * 0.9,
        fillColor: fillColor || preset.fillColor || randomColor(),
        strokeColor: strokeColor,
        name: 'circle'
      });
      task.addChild( circle );

      var icon = new PointText({
        point: point + [ 0, (preset.iconSize * 0.33) ],
        content: iconChar || preset.iconChar,
        justification: 'center',
        characterStyle: {
          fontFamily: 'FontAwesome',
          fillColor: textColor || preset.textColor,
          fontSize: preset.iconSize
        },
        name: 'icon'
      });
      task.addChild( icon );

      return task;
    },
    add: function( point, ref, fillColor, textColor, iconChar ) {
      if( !preventAdd ) {
        // create task marker
        var task = this.make( point, fillColor, textColor, iconChar );
        // assign an id
        task.name = ref ? '#' + ref : 'task-' + (new Date()).valueOf();
        task.point = point;

        /*
          Handle task events (pubsub style)
         */
        task.onMouseUp = function( event ) {
          $.publish( 'task:click', [ event, task ] );

          return false;
        };
        task.onMouseEnter = function( event ) {
          preventAdd = true;

          $.publish( 'task:mouseenter', [ event, task ] );

          return false;
        };
        task.onMouseLeave = function( event ) {
          preventAdd = false;

          $.publish( 'task:mouseleave', [ event, task ] );

          return false;
        };

        // task was created and now occupies space, lets not
        // allow another task to be created over this
        preventAdd = true;

        // add to internal store
        tasks.push( task );

        paper.view.update();
        $.publish( 'task:added', [ task ] );
        return task;
      }

      return false;
    },
    forceAdd: function( point, ref, fillColor, textColor, iconChar ) {
      var tmpPreventAdd = preventAdd;
      preventAdd = false;

      var rtn = this.add( point, ref, fillColor, textColor, iconChar );

      preventAdd = tmpPreventAdd;

      return rtn;
    },
    remove: function( ref ) {
      for( var i = 0; i < tasks.length; i++ ) {
        if( tasks[ i ].name === ref ) {
          // remove from store
          var task = tasks[ i ];
          tasks.splice( i, 0 );

          // remove from paper
          task.remove();

          $.publish( 'task:removed', [ task ] );

          break;
        }
      }

      // update view now we deleted something
      paper.view.update();
    },
    clear: function() {
      for( var i = 0; i < tasks.length; i++ ) {
        // remove from store
        this.remove( tasks[ i ].name );
      }

      // update view now we deleted something
      paper.view.update();
    },
    setIcon: function( iconChar ) {
      preset.iconChar = iconChar || preset.iconChar;
    },
    setFillColor: function( fillColor ) {
      preset.fillColor = fillColor || preset.fillColor;
    },
    setTextColor: function( textColor ) {
      preset.textColor = textColor || preset.textColor;
    },
  };
};

/* --------------------------------------
  Paper wide events handlers
 -------------------------------------- */

onMouseUp = function( event ) {
  // attempt task creation on mouse click
  Tasks.add( event.point, undefined );
};

/* --------------------------------------
  Listen for external triggers
 -------------------------------------- */

$.subscribe( 'task:remove', function( event, ref ) {
  Tasks.remove( ref );
});

$.subscribe( 'task:add', function( event, coords, ref, fillColor, textColor, iconChar ) {
  // y coord must be inversed
  var point = [ convertCoordToPoint( coords.x ), convertCoordToPoint( -coords.y ) ];
  Tasks.forceAdd( new Point( point ), ref, fillColor, textColor, iconChar );
});

$.subscribe( 'tasks:clear', function( event, ref ) {
  Tasks.clear();
});

$.subscribe( 'task:preset', function( event, fillColor, textColor, iconChar ) {
  Tasks.setFillColor( fillColor );
  Tasks.setTextColor( textColor );
  Tasks.setIcon( iconChar );
});

/* --------------------------------------
  Publish ready event
 -------------------------------------- */

$.publish( 'paper:ready' );
